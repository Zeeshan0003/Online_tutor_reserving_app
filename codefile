#include <iostream>
using namespace std;

class User {
private:
    string username, password, email, role;

public:
    User(string u, string p, string e, string r)
        : username(u), password(p), email(e), role(r) {}

    string getUsername() const {
        return username;
    }

    void registerUser() {
        cout << username << " Tutor registered successfully!" << endl;
    }

    void loginUser() {
        cout << username << " logged in successfully!" << endl;
    }
};
class Tutor : public User {
private:
    string qualifications;
    string availability;

public:
    Tutor(string uname, string pwd, string mail, string qual, string avail)
        : User(uname, pwd, mail, "tutor"), qualifications(qual), availability(avail) {}

    void setQualifications(string qual) {
        qualifications = qual;
    }

    void setAvailability(string avail) {
        availability = avail;
    }
};
class Student : public User {
private:
    int grade;
    string subjectsOfInterest;

public:
    Student(string uname, string pwd, string mail)
        : User(uname, pwd, mail, "student"), grade(0), subjectsOfInterest("") {}

    void setGrade(int grd) {
        grade = grd;
    }

    void setSubjectsOfInterest(string subjects) {
        subjectsOfInterest = subjects;
    }
};

class Tutorfiltr {
private:
    string subject;

public:
    Tutorfiltr(string sub)
        : subject(sub) {}

    void Display() {
        cout << "Tutor xyz available for " << subject << endl;
    }
};
class RealTimeMessagingSystem {
public:
    void sendMessage(User& sender, User& receiver, string message) {
        cout << sender.getUsername() << " sent message to " << receiver.getUsername() << ": " << message << endl;
    }
};
class ProgressTracking {
public:
    void trackProgress(Student& student) {
        cout << "Progress tracked for student " << student.getUsername() << endl;
    }
};
class SessionRescheduling {
public:
    void rescheduleSession(Tutor& tutor, Student& student, string newDateTime) {
        cout << "Session with tutor " << tutor.getUsername() << " for student " << student.getUsername()
             << " rescheduled to " << newDateTime << endl;
    }
};
class GroupTutoring {
public:
    void createGroupSession(const Student students[], int numStudents, Tutor& tutor, string dateTime) {
        cout << "Group session created by tutor " << tutor.getUsername() << " for students:" << endl;
        for (int i = 0; i < numStudents; ++i) {
            cout << students[i].getUsername() << endl;
        }
        cout << "Date and time: " << dateTime << endl;
    }
};
